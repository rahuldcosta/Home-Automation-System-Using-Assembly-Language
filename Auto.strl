module temp_controller :
input                TEMP :=50 : integer, SAMPLE_TIME, DELTA_T;
output            FAN_ON, FAN_OFF, AC_ON, AC_OFF,HEATER_ON,HEATER_OFF;
relation            SAMPLE_TIME => TEMP;


signal HIGH, LOW ,MED in 
    every SAMPLE_TIME do
        present TEMP else await TEMP end present;

        if ( ?TEMP <= 20  ) 
		then 
		emit LOW ;
		else if (?TEMP >= 21 and ?TEMP <=28) 
		then
		emit MED;
		else if ( ?TEMP >=29  )
		then
		emit HIGH;
		end if;
		end if;
		end if;
        end every;
        ||
		
		%HEATER_CODE
         
            do
		emit TEMP(pre(?TEMP));
		watching DELTA_T
		timeout
		
		await immediate LOW;
		
		emit FAN_OFF||emit HEATER_ON;
		loop
		emit TEMP (pre(?TEMP) + 1);
		
		if (?TEMP > 21)
		then
		weak abort
		emit HEATER_OFF||emit FAN_ON;
		
		when immediate MED;
		end if ;
		
         end loop;
		 end;
	     ||
		 
		 %AC_CODE
		 do
		 emit TEMP(pre(?TEMP));
		 watching DELTA_T
        timeout
		 
            await immediate HIGH;
			
			emit FAN_OFF || emit AC_ON;
			loop 
			emit TEMP(pre(?TEMP) - 1);
			 
			if (?TEMP <29)
			then
			weak abort
			emit AC_OFF || emit FAN_ON;
			when immediate MED ;
			end if;  
		    
         end loop;
	     end;
		 
		||
		
		%FAN_CODE
		do
		emit TEMP(pre(?TEMP));
		watching DELTA_T
		timeout
		
		  await immediate MED;
		  
		  emit HEATER_OFF || emit AC_OFF || emit FAN_ON;
		  loop 
		  emit TEMP(pre(?TEMP)-1);
		  var FANSPEED := 0 : integer in
            if (?TEMP <=20)
            then
              weak abort
              emit FAN_OFF;
              emit HEATER_ON;
              when immediate MED;			  
		    else if (?TEMP >=21 and  ?TEMP <=23)
		    then
		      FANSPEED := FANSPEED+1
		    else if (?TEMP >=24 and ?TEMP <=26)
		    then
		      FANSPEED := FANSPEED+2
		    else if (?TEMP >=27 and ?TEMP <=29)
		    then
		      FANSPEED := FANSPEED+3
		    else if (?TEMP >=30)
		    then
		      weak abort
			  emit FAN_OFF;
			  emit AC_ON;
	          when immediate MED;
		    end if;	
            end if;		  
		    end if;
		    end if;
			end if;
			end var;
           end loop;
		   end;
		 
end;
end module